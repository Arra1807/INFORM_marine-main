_wandb:
    value:
        cli_version: 0.21.0
        e:
            p6tdinnp4o1369ifidk26jkage4zupzx:
                codePath: data_patching.ipynb
                codePathLocal: data_patching.ipynb
                cpu_count: 4
                cpu_count_logical: 8
                disk:
                    /:
                        total: "510665232384"
                        used: "259812171776"
                email: arangan18@hotmail.com
                executable: c:\Users\shado\AppData\Local\Programs\Python\Python312\python.exe
                host: Asus
                memory:
                    total: "6387490816"
                os: Windows-11-10.0.26100-SP0
                program: c:\Users\shado\Documents\Master Thesis\INFORM_marine-main_new\INFORM_marine-main\data_patching.ipynb
                python: CPython 3.12.5
                root: c:\Users\shado\Documents\Master Thesis\INFORM_marine-main_new\INFORM_marine-main
                startedAt: "2025-07-24T13:25:44.043235Z"
                writerId: p6tdinnp4o1369ifidk26jkage4zupzx
        m: []
        python_version: 3.12.5
        t:
            "1":
                - 1
                - 5
                - 41
                - 53
            "2":
                - 1
                - 5
                - 41
                - 53
            "3":
                - 2
                - 16
            "4": 3.12.5
            "5": 0.21.0
            "8":
                - 1
                - 3
            "12": 0.21.0
            "13": windows-amd64
batch_size:
    value: 32
epochs:
    value: 50
learning_rate:
    value: 0.001
model:
    value: |-
        ResNetAutoEncoder(
          (encoder): Sequential(
            (0): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Identity()
            (4): Sequential(
              (0): BasicBlock(
                (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (1): BasicBlock(
                (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (relu): ReLU(inplace=True)
                (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
          (compressor): Sequential(
            (0): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Sigmoid()
          )
          (decoder): Sequential(
            (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): Sigmoid()
          )
        )
